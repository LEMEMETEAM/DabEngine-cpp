#ifndef VECTOR_H_
#define VECTOR_H_

#include <type_traits>
#include <math.h>
#include <limits>
#include <initializer_list>

template<typename T>
class vec
{

    T* m_vec;
public:
    const int size;

    vec(int _size):size(_size)
    {
        m_vec = new T[size];
    }

    vec(std::initializer_list<T> l)
    {
        m_vec = new T[l.size()];
        for(int i = 0; i < l.size(); i++)
        {
            m_vec[i] = l[i];
        }
        size = l.size();
    }

    inline T& x(){if(size >= 1)return m_vec[0];}
    inline T& y(){if(size >= 2)return m_vec[1];}
    inline T& z(){if(size >= 3)return m_vec[2];}
    inline T& w(){if(size >= 4)return m_vec[3];}

    inline vec operator-() const
    {
        vec result = *this;
        for(int i = 0; i < size; i++)
        {
            T& c = result.m_vec[i];
            c = -c;
        }
        return result;
    }

    inline vec operator+(const vec& ref) const
    {
        vec result = *this;
        for(int i = 0; i < size; i++)
        {
            result.m_vec[i] += ref.m_vec[i];
        }
        return result;
    }

    inline vec operator-(const vec& ref) const
    {
        vec result = *this;
        for(int i = 0; i < size; i++)
        {
            result.m_vec[i] -= ref.m_vec[i];
        }
        return result;
    }

    inline vec& operator+=(const vec& ref) 
    {
        for(int i = 0; i < size; i++)
        {
            m_vec[i] += ref.m_vec[i];
        }
        return this;
    }

    inline vec& operator-=(const vec& ref)
    {
        for(int i = 0; i < size; i++)
        {
            m_vec[i] -= ref.m_vec[i];
        }
        return this;
    }

    inline vec operator*(const T scalar) const
    {
        vec result = *this;
        for(int i = 0; i < result.size; i++)
        {
            T& c = result.m_vec[i];
            c *= scalar;
        }
        return result;
    }

    inline vec operator*(const vec& ref) const
    {
        vec result = *this;
        for(int i = 0; i < size; i++)
        {
            result.m_vec[i] *= ref.m_vec[i];
        }
        return result;
    }

    inline vec& operator*=(const T scalar)
    {
        for(int i = 0; i < size; i++)
        {
            T& c = m_vec[i];
            c *= scalar;
        }
        return this;
    }

    inline vec& operator*=(const vec& ref)
    {
        for(int i = 0; i < size; i++)
        {
            m_vec[i] *= ref.m_vec[i];
        }
        return this;
    }

    inline vec operator/(const T scalar)
    {
        vec result = *this;
        for(int i = 0; i < result.size; i++)
        {
            T& c = result.m_vec;
            c /= scalar;
        }
        return result;
    }

    inline vec& operator/=(const T scalar)
    {
        for(int i = 0; i < size; i++)
        {
            T& c = m_vec[i];
            c /= scalar;
        }
        return this;
    }

    inline T operator[](int index) const{return m_vec[index];}
    inline T& operator[](int index){return m_vec[index];}

    inline T length() const
    {
        T l = 0;
        for(int i = 0; i < size; i++)
        {
            const T& c = m_vec[i];
            l += c * c;
        }
        return std::sqrt(l);
    }

    inline T distance(const vec& ref)
    {
        T d = 0;
        for(int i = 0; i < size; i++)
        {
            d += (ref.m_vec[i]-m_vec[i])*(ref.m_vec[i]-m_vec[i]);
        }
        return std::sqrt(d);
    }

    template<int X = size, typename std::enable_if<(X == 3)>::type* = nullptr>
    inline vec cross(const vec& ref)
    {
        return vec((m_vec[1] * ref.m_vec[2]) - (m_vec[2] * ref.m_vec[1]),
                    (m_vec[2] * ref.m_vec[0]) - (m_vec[0] * ref.m_vec[2]),
                    (m_vec[0] * ref.vm_vec[1]) - (m_vec[1] * ref.m_vec[0]));
    }

    inline T dot(const vec& ref)
    {
        T d = 0;
        for(int i = 0; i < size; i++)
        {
            d += ref.m_vec[i]*m_vec[i];
        }
        return d;
    }

    inline vec& normalize()
    {
        T n = 0;
        for(int i = 0; i < size; i++)
        {
            T& c = m_vec[i];
            n += c * c;
        }

        if(n == 1) return *this;

        n = std::sqrt(n);
        if(n <= std::numeric_limits<T>::min()) return *this;

        for(int i = 0; i < size; i++)
        {
            T& c = m_vec[i];
            c /= n;
        }

        return *this;
    }
};

typedef vec<int> veci;
typedef vec<float> vecf;
typedef vec<double> vecd;

#endif